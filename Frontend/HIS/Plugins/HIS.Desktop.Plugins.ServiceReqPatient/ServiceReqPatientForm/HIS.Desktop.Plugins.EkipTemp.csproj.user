using DevExpress.Data;
using DevExpress.Utils;
using DevExpress.XtraEditors;
using DevExpress.XtraEditors.ViewInfo;
using DevExpress.XtraGrid.Views.Base;
//using DevExpress.XtraNavBar;
using Inventec.Common.Adapter;
using Inventec.Common.Controls.EditorLoader;
using Inventec.Common.Logging;
using Inventec.Core;
using Inventec.Desktop.Common.Message;
using Inventec.UC.Paging;
using HIS.Desktop.ApiConsumer;
using HIS.Desktop.Common;
using HIS.Desktop.Controls.Session;
using HIS.Desktop.LibraryMessage;
using HIS.Desktop.LocalStorage.BackendData;
using HIS.Desktop.LocalStorage.ConfigApplication;
using HIS.Desktop.LocalStorage.LocalData;
using HIS.Desktop.Utilities;
using MOS.EFMODEL.DataModels;
using MOS.Filter;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;
using System.Drawing;
using Inventec.Desktop.Common.Controls.ValidationRule;
using DevExpress.XtraEditors.DXErrorProvider;
using System.Resources;
using HIS.Desktop.Utility;
using DevExpress.XtraLayout;
using Inventec.Desktop.Common.LanguageManager;
using HIS.Desktop.Plugins.ServiceReqPatient.ADO;
namespace HIS.Desktop.Plugins.ServiceReqPatient
{
    public partial class ServiceReqPatientForm : FormBase
    {
        #region Declare
        int rowCount = 0;
        int dataTotal = 0;
        int startPage = 0;
        int ActionType = -1;

        int NumDate;
        List<HIS_SERVICE_REQ> HisServiceReqList = new List<HIS_SERVICE_REQ>();
        List<HIS_SERVICE_REQ_MATY> HisServiceReqMatyList = new List<HIS_SERVICE_REQ_MATY>();
        List<HIS_SERVICE_REQ_METY> HisServiceReqMetyList = new List<HIS_SERVICE_REQ_METY>();

        List<ServiceReqPatientADO> ServiceReqPatientADOList = new List<ServiceReqPatientADO>();
        long? PatientId;
        Inventec.Desktop.Common.Modules.Module currentModule;
        //Dictionary<string, int> dicOrderTabIndexControl = new Dictionary<string, int>();
        //int positionHandle = -1;
        //List<ACS.EFMODEL.DataModels.ACS_USER> ListName = HIS.Desktop.LocalStorage.BackendData.BackendDataWorker.Get<ACS.EFMODEL.DataModels.ACS_USER>();
        //List<MOS.EFMODEL.DataModels.HIS_EXECUTE_ROLE> Execute = HIS.Desktop.LocalStorage.BackendData.BackendDataWorker.Get<MOS.EFMODEL.DataModels.HIS_EXECUTE_ROLE>();
        //List<MOS.EFMODEL.DataModels.HIS_EKIP_TEMP> ekipTemps { get; set; }
        #endregion

        #region construct

        public ServiceReqPatientForm(Inventec.Desktop.Common.Modules.Module module, long? _PatientId)
            : base(module)
        {

            try
            {
                InitializeComponent();
                //pagingGrid = new PagingGrid();
                currentModule = module;
                this.PatientId = _PatientId;
                try
                {
                    string iconPath = System.IO.Path.Combine(HIS.Desktop.LocalStorage.Location.ApplicationStoreLocation.ApplicationStartupPath, System.Configuration.ConfigurationSettings.AppSettings["Inventec.Desktop.Icon"]);
                    this.Icon = Icon.ExtractAssociatedIcon(iconPath);
                }
                catch (Exception ex)
                {
                    LogSystem.Warn(ex);
                }

            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }


        public ServiceReqPatientForm(Inventec.Desktop.Common.Modules.Module module)
            : base(module)
        {

            try
            {
                InitializeComponent();
                //pagingGrid = new PagingGrid();
                currentModule = module;
                try
                {
                    string iconPath = System.IO.Path.Combine(HIS.Desktop.LocalStorage.Location.ApplicationStoreLocation.ApplicationStartupPath, System.Configuration.ConfigurationSettings.AppSettings["Inventec.Desktop.Icon"]);
                    this.Icon = Icon.ExtractAssociatedIcon(iconPath);
                }
                catch (Exception ex)
                {
                    LogSystem.Warn(ex);
                }

            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        #endregion

        #region Private method

        private void ServiceReqPatientForm_Load(object sender, EventArgs e)
        {
            try
            {
                MeShow();
            }
            catch (Exception ex) { Inventec.Common.Logging.LogSystem.Warn(ex); }

        }

        private void SetDefaultValue()
        {
            try
            {
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        private void EnableControlChanged(int action)
        {
            try
            {
                // btnEdit.Enabled = (action == GlobalVariables.ActionEdit);


            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }

        }

        private void FillDatagctFormList()
        {
            try
            {
                WaitingManager.Show();
                LoadServiceReq();
                CreateColumn();

                LoadServiceReqMaty();
                LoadServiceReqMety();





                WaitingManager.Hide();
            }
            catch (Exception ex)
            {
                LogSystem.Error(ex);
                WaitingManager.Hide();
            }
        }

        private void CreateColumn()
        {
            NumDate = HisServiceReqList.Count();
            for (int i = 0; i < HisServiceReqList.Count(); i++)
            {
                for (int j = i+1; j < HisServiceReqList.Count(); j++)
                {
                    if (HisServiceReqList[i]==HisServiceReqList[j])
                    {
                        NumDate = NumDate - 1;
                    }
                }
            }
            for (int i = 0; i < NumDate; i++)
            {
                 DevExpress.XtraGrid.Views.BandedGrid.GridBand grblx=new DevExpress.XtraGrid.Views.BandedGrid.GridBand();
                 grblx.Caption = Convert.ToString(HisServiceReqList[i].INTRUCTION_DATE);

                 DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn y = new DevExpress.XtraGrid.Views.BandedGrid.BandedGridColumn();
                 y.Caption = "";
                 y.FieldName = Convert.ToString(HisServiceReqList[i].INTRUCTION_DATE);
                 y.Name = Convert.ToString(HisServiceReqList[i].INTRUCTION_DATE);
                 y.OptionsColumn.ShowCaption = false;
                 y.UnboundType = DevExpress.Data.UnboundColumnType.Object;
                 y.Visible = true;

                 grblDay.Children.AddRange(new DevExpress.XtraGrid.Views.BandedGrid.GridBand[] {
            grblx});

                 grblx.Columns.Add(y);
            }

        }

        private void LoadServiceReqMety()
        {
            foreach (var item in HisServiceReqList)
            {
                CommonParam paramCommon = new CommonParam();
                HisServiceReqMetyFilter filter = new HisServiceReqMetyFilter();
                filter.SERVICE_REQ_ID = item.ID;
                List<HIS_SERVICE_REQ_METY> HisServiceReqMety = new BackendAdapter(paramCommon).Get<List<HIS_SERVICE_REQ_METY>>(HisRequestUriStore.MOSHIS_SERVICE_REQ_METY_GET, ApiConsumers.MosConsumer, filter, paramCommon);
                foreach (var Mety in HisServiceReqMety)
                {
                ServiceReqPatientADO service = new ServiceReqPatientADO();
                service.AMOUNT = Mety.AMOUNT;
                service.ServiceReqPatientName = Mety.MEDICINE_TYPE_NAME;
                service.MEDICINE_TYPE_ID = Mety.MEDICINE_TYPE_ID;
                service.UNIT_NAME = Mety.UNIT_NAME;
                }



                //service.DATE = item.INTRUCTION_DATE;
                
            }
        }

        private void LoadServiceReqMaty()
        {
            foreach (var item in HisServiceReqList)
            {
                CommonParam paramCommon = new CommonParam();
                HisServiceReqMatyFilter filter = new HisServiceReqMatyFilter();
                filter.SERVICE_REQ_ID = item.ID;
                HIS_SERVICE_REQ_MATY HisServiceReqMaty = new BackendAdapter(paramCommon).Get<HIS_SERVICE_REQ_MATY>(HisRequestUriStore.MOSHIS_SERVICE_REQ_MATY_GET, ApiConsumers.MosConsumer, filter, paramCommon);
                HisServiceReqMatyList.Add(HisServiceReqMaty);
            }
        }

        private void LoadServiceReq()
        {
            CommonParam paramCommon = new CommonParam();
            HisServiceReqFilter filter = new HisServiceReqFilter();
            filter.TDL_PATIENT_ID = PatientId;
            HisServiceReqList = new BackendAdapter(paramCommon).Get<List<HIS_SERVICE_REQ>>(HisRequestUriStore.MOSHIS_SERVICE_REQ_GET, ApiConsumers.MosConsumer, filter, paramCommon);
        }

        private void SetCaptionByLanguageKey()
        {
            try
            {

                if (this.currentModule != null && !string.IsNullOrEmpty(currentModule.text))
                {
                    this.Text = this.currentModule.text;
                }
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        private void InitTabIndex()
        {
            try
            {
               
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        private void ValidateForm()
        {
            try
            {

                //ValidationSingleControl(txtEkipName);


            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        public void SetDefaultFocus()
        {
            try
            {
                
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Debug(ex);
            }
        }

        private void LoadPaging(object param)
        {
            try
            {
                #region Process has exception
                CommonParam paramCommon = new CommonParam();
                SessionManager.ProcessTokenLost(paramCommon);
                #endregion
            }
            catch (Exception ex)
            {
                LogSystem.Error(ex);
            }
        }

        private void SetFilterNavBar()
        {
            try
            {
               
            }
            catch (Exception ex)
            {
                LogSystem.Error(ex);
            }
        }

        private bool SetTabIndexToControl(KeyValuePair<string, int> itemOrderTab, DevExpress.XtraLayout.LayoutControl layoutControlEditor)
        {
            bool success = false;
            try
            {
                if (!layoutControlEditor.IsInitialized) return success;
                layoutControlEditor.BeginUpdate();
                try
                {
                    foreach (DevExpress.XtraLayout.BaseLayoutItem item in layoutControlEditor.Items)
                    {
                        DevExpress.XtraLayout.LayoutControlItem lci = item as DevExpress.XtraLayout.LayoutControlItem;
                        if (lci != null && lci.Control != null)
                        {
                            BaseEdit be = lci.Control as BaseEdit;
                            if (be != null)
                            {
                                //Cac control dac biet can fix khong co thay doi thuoc tinh enable
                                if (itemOrderTab.Key.Contains(be.Name))
                                {
                                    be.TabIndex = itemOrderTab.Value;
                                }
                            }
                        }
                    }
                }
                finally
                {
                    layoutControlEditor.EndUpdate();
                }
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }

            return success;
        }

        private void ValidationSingleControl(BaseEdit control)
        {
            try
            {
               
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }
        
        private void LoadCurrent(long currentId, ref MOS.EFMODEL.DataModels.HIS_EKIP_TEMP currentDTO)
        {
            try
            {
                
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        private void ResetFormData()
        {
            try
            {
                if (!layoutControl1.IsInitialized) return;
                layoutControl1.BeginUpdate();
                try
                {
                    foreach (DevExpress.XtraLayout.BaseLayoutItem item in layoutControl1.Items)
                    {
                        DevExpress.XtraLayout.LayoutControlItem lci = item as DevExpress.XtraLayout.LayoutControlItem;
                        if (lci != null && lci.Control != null && lci.Control is BaseEdit)
                        {
                            DevExpress.XtraEditors.BaseEdit fomatFrm = lci.Control as DevExpress.XtraEditors.BaseEdit;
                            fomatFrm.ResetText();
                            fomatFrm.EditValue = null;
                            //txtEkipName.Focus();

                        }
                    }
                }
                catch (Exception ex)
                {
                    Inventec.Common.Logging.LogSystem.Warn(ex);
                }
                finally
                {
                    layoutControl1.EndUpdate();


                }
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }

        private void SetFocusEditor()
        {
            try
            {
                //txtEkipName.Focus();
                //txtEkipName.SelectAll();
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Debug(ex);
            }
        }

       
        private void FillDataToEditorControl(MOS.EFMODEL.DataModels.HIS_EKIP_TEMP data)
        {
            try
            {
                if (data != null)
                {

                    //txtEkipName.Text = data.EKIP_TEMP_NAME;

                }
            }
            catch (Exception ex)
            {
                Inventec.Common.Logging.LogSystem.Warn(ex);
            }
        }
      

      
       
        #endregion

        #region Public method

        public void MeShow()
        {
            //cboIsPublic.SelectedIndex = 2;

            SetDefaultValue();

            EnableControlChanged(this.ActionType);

            FillDatagctFormList();

            SetCaptionByLanguageKey();

            InitTabIndex();

            ValidateForm();

            SetDefaultFocus();
        }
        #endregion
    }
}