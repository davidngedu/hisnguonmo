<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BNCoTTDienDoiTuong" xml:space="preserve">
    <value>Patients with heterogeneous subject information.</value>
  </data>
  <data name="BNTreEmCanNhapDuTT" xml:space="preserve">
    <value>Child patients need to enter complete province and district information</value>
  </data>
  <data name="CapNhatTTDTTB" xml:space="preserve">
    <value>Update object information failed. {0}. Please go to the edit patient information function to update again.</value>
  </data>
  <data name="DaCoThongTinDoiTuongBHYT" xml:space="preserve">
    <value>There is information on the subject of health insurance for medical orders {0} not allowing to change the card period</value>
  </data>
  <data name="DichVuBatBuocChonDieuKien" xml:space="preserve">
    <value>Service {0} is required to select Condition.</value>
  </data>
  <data name="DoiTuongKhamSucKhoe" xml:space="preserve">
    <value>Subjects of medical examination must have a contract of medical examination</value>
  </data>
  <data name="DVKhongTheChuyenDoi" xml:space="preserve">
    <value>Service with code: {0} could not be converted because the policy could not be found</value>
  </data>
  <data name="GoiSangCongBHXHTraVeMaLoi" xml:space="preserve">
    <value>Error code: {0}</value>
  </data>
  <data name="Gov001" xml:space="preserve">
    <value>The card is managed by the Social Security of the Ministry of Defense, please check the card and identification information</value>
  </data>
  <data name="Gov002" xml:space="preserve">
    <value>The card is managed by the Ministry of Public Security's Social Security, please check the card and identification information</value>
  </data>
  <data name="Gov010" xml:space="preserve">
    <value>Card is expired</value>
  </data>
  <data name="Gov050" xml:space="preserve">
    <value>Can't see health insurance card information</value>
  </data>
  <data name="Gov051" xml:space="preserve">
    <value>Card code is incorrect</value>
  </data>
  <data name="Gov052" xml:space="preserve">
    <value>The card issuing province code (the 4th and 5th character of the card code) is incorrect</value>
  </data>
  <data name="Gov053" xml:space="preserve">
    <value>Card benefit code (3rd character) is incorrect</value>
  </data>
  <data name="Gov060" xml:space="preserve">
    <value>Card with wrong name</value>
  </data>
  <data name="Gov061" xml:space="preserve">
    <value>Card with wrong name (correct first letter)</value>
  </data>
  <data name="Gov070" xml:space="preserve">
    <value>Wrong date of birth card</value>
  </data>
  <data name="Gov080" xml:space="preserve">
    <value>Card of wrong gender</value>
  </data>
  <data name="Gov100" xml:space="preserve">
    <value>Error getting card number data</value>
  </data>
  <data name="Gov101" xml:space="preserve">
    <value>Error Server Gov</value>
  </data>
  <data name="Gov110" xml:space="preserve">
    <value>Card has been revoked</value>
  </data>
  <data name="Gov120" xml:space="preserve">
    <value>Discounted card</value>
  </data>
  <data name="Gov121" xml:space="preserve">
    <value>Reduced card. Reducing out-of-province transfers</value>
  </data>
  <data name="Gov122" xml:space="preserve">
    <value>Reduced card. Reduce intra-provincial transfers</value>
  </data>
  <data name="Gov123" xml:space="preserve">
    <value>Reduced card. Recovered due to the same unit increase</value>
  </data>
  <data name="Gov124" xml:space="preserve">
    <value>Reduced card. Stop participating</value>
  </data>
  <data name="Gov130" xml:space="preserve">
    <value>Children do not present the card</value>
  </data>
  <data name="GovError" xml:space="preserve">
    <value>Invalid card</value>
  </data>
  <data name="Gio" xml:space="preserve">
    <value>hour</value>
  </data>
  <data name="Ma" xml:space="preserve">
    <value>Code</value>
  </data>
  <data name="Ngay" xml:space="preserve">
    <value>day</value>
  </data>
  <data name="SuaTTBN" xml:space="preserve">
    <value>. Do you want to correct patient information?</value>
  </data>
  <data name="Ten" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="TLTT" xml:space="preserve">
    <value>Payment rate</value>
  </data>
  <data name="TongSoTienCuaCacDichVu" xml:space="preserve">
    <value>The total amount of the prescribed services of the patient subject to {0} coverage for the health insurance of {1} exceeded the limit of {2}. Do you want to continue?</value>
  </data>
  <data name="Tuoi" xml:space="preserve">
    <value>year old</value>
  </data>
  <data name="Thang" xml:space="preserve">
    <value>month</value>
  </data>
  <data name="TheBhytKhongHopLeBanCoMuonSuDung" xml:space="preserve">
    <value>Invalid health insurance card. Do you want to use it with health insurance?</value>
  </data>
  <data name="TheBhytKhongHopLeKhongChoPhepDangKy" xml:space="preserve">
    <value>Invalid health insurance card. Registration with health insurance is not allowed</value>
  </data>
  <data name="TheNayDaDuocSD" xml:space="preserve">
    <value>This tag has been used by patient: {0}. Do you want to concatenate the code?</value>
  </data>
  <data name="TheSapHetHan" xml:space="preserve">
    <value>The card is about to expire ({0} days left), do you want to use it?</value>
  </data>
  <data name="ThongBao" xml:space="preserve">
    <value>Notification</value>
  </data>
  <data name="ThongBaoKetQuaTimKiemBenhNhanKhiQuetTheDuLieuTraVeNull" xml:space="preserve">
    <value>Invalid card</value>
  </data>
  <data name="XuLyThatBai" xml:space="preserve">
    <value>Handling failure.</value>
  </data>
  <data name="ChuyenVien" xml:space="preserve">
    <value>Hospital transfer</value>
  </data>
  <data name="Do" xml:space="preserve">
    <value>Support</value>
  </data>
  <data name="Khoi" xml:space="preserve">
    <value>Cured</value>
  </data>
  <data name="KhongThayDoi" xml:space="preserve">
    <value>Constant</value>
  </data>
  <data name="NangHon" xml:space="preserve">
    <value>Heavier</value>
  </data>
  <data name="RaVien" xml:space="preserve">
    <value>Discharge</value>
  </data>
  <data name="TrongVien" xml:space="preserve">
    <value>Escape from the hospital</value>
  </data>
  <data name="TuVong" xml:space="preserve">
    <value>Dead</value>
  </data>
  <data name="XinRaVien" xml:space="preserve">
    <value>Please leave the hospital</value>
  </data>
</root>